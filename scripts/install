#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

### Install parameters are automatically saved as settings
###
### Settings are automatically loaded as bash variables
### in every app script context, therefore typically these will exist:
### - $domain
### - $path
### - $language
### ... etc
###
### Resources defined in the manifest are provisioned prior to this script
### and corresponding settings are also available, such as:
### - $install_dir
### - $port
### - $db_name
### ...
###
### $app is the app id (i.e. 'example' for first install,
### or 'example__2', '__3', ... for multi-instance installs)

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

# If you need to, you can define custom settings
# (or remove this section entirely if not relevant for you)

# Check (in manifest?) if the selected synapse instance is not already connected to a mautrix_bridge bridge

server_name=$(ynh_app_setting_get --app "$homeserver" --key server_name)
domain=$(ynh_app_setting_get --app "$homeserver" --key domain)

# mautrix_ynh settings: synapsenumber botname bot_synapse_admin encryption botadmin botusers enable_relaybot
botname=$(ynh_app_setting_get --app "mautrix_$bridge" --key botname)
#command_prefix=$(ynh_app_setting_get --app "mautrix_$bridge" --key command_prefix)
#puppet=$(ynh_app_setting_get --app "mautrix_$bridge" --key puppet)
#encryption=$(ynh_app_setting_get --app "mautrix_$bridge" --key encryption)
#enable_relaybot=$(ynh_app_setting_get --app "mautrix_$bridge" --key enable_relaybot)

listrelay=$(ynh_app_setting_get --app "mautrix_$bridge" --key listrelay)
listuser=$(ynh_app_setting_get --app "mautrix_$bridge" --key listuser)
listadmin=$(ynh_app_setting_get --app "mautrix_$bridge" --key listadmin)
if [ "$botusers" == "domain.tld" ]; then
	botusers="$server_name"
fi

if [ "$admins" == "@admin:domain.tld" ]; then
	admins="@admin:$server_name"
fi

botname_sg='signalbot'
botname_tg='telegrambot'
botname_wa='whatsappbot'
username_template_sg='sg_'
username_template_tg='tg_'
username_template_wa='wa_'
command_prefix_sg='!sg'
command_prefix_tg='!tg'
command_prefix_wa='!wa'

if [ "$bridge" == "signal" ]; then
	botname_sg=$botname
	#command_prefix_sg=$command_prefix
	#username_template_sg=$username_template
elif [ "$bridge" == "telegram" ]; then
	botname_tg=$botname
	#command_prefix_tg=$command_prefix
	#username_template_tg=$username_template
elif [ "$bridge" == "whatsapp" ]; then
	botname_wa=$botname
	#command_prefix_wa=$command_prefix
	#username_template_wa=$username_template
fi
#else
	#botname_wa=''
	#command_prefix_wa=''
	#username_template_wa=''
#fi

# register $botaccount with $botpassword and get $access_token
botpassword= #find a way to generate a password
ynh_app_setting_set --app="$app" --key=botpassword --value="$botpassword"
printf "$botaccount\n$botpassword\n$botpassword\nn" | ynh_exec_as $homeserver /opt/yunohost/matrix-$homeserver/bin/register_new_matrix_user -c /etc/matrix-$homeserver/homeserver.yaml
#Prompt to answer 
#New user localpart: $botaccount
#Password: $botpassword
#Confirm password: $botpassword
#Make admin [no]:
#Success!

# $access_token=$(curl '{"type":"m.login.password", "user":"'$botaccount'", "password":"'$botpassword'"}' "https://$domain/_matrix/client/v3/login")

ynh_app_setting_set --app="$app" --key=access_token --value="$access_token"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file manifest.toml

# Download, check integrity, uncompress and patch the source from manifest.toml
ynh_setup_source --dest_dir="$install_dir"

# Install virtualenv
python3 -m venv $install_dir
#ynh_exec_as $app $install_dir/bin/python -m pip install -r requirements.txt

### $install_dir will automatically be initialized with some decent
### permission by default ... however, you may need to recursively reapply
### ownership to all files such as after the ynh_setup_source step
chown -R "$app:$app" "$install_dir"

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression --message="Adding $app's configuration files..." --weight=1

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

ynh_add_config --template="config.yaml" --destination="$install_dir/config.yaml"

# FIXME: this should be handled by the core in the future
### You may need to use chmod 600 instead of 400,
### for example if the app is expected to be able to modify its own config
chmod 400 "$install_dir/config.yaml"
chown "$app:$app" "$install_dir/config.yaml"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/some_config_file"
### ynh_store_file_checksum --file="$install_dir/some_config_file"

printf "$botpassword\n" | ynh_exec_as $app env PATH=$install_dir/arn-messager -u @$botaccount@$server_name & PID=$!
# Wait for 2 seconds
sleep 2
# Kill it
kill $PID

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression --message="Adding system configurations related to $app..." --weight=1

### `ynh_systemd_config` is used to configure a systemd script for an app.
### It can be used for apps that use sysvinit (with adaptation) or systemd.
### Have a look at the app to be sure this app needs a systemd script.
### `ynh_systemd_config` will use the file conf/systemd.service
### If you're not using these lines:
###   - You can remove those files in conf/.
###   - Remove the section "BACKUP SYSTEMD" in the backup script
###   - Remove also the section "STOP AND REMOVE SERVICE" in the remove script
###   - As well as the section "RESTORE SYSTEMD" in the restore script
###   - And the section "SETUP SYSTEMD" in the upgrade script

# Create a dedicated systemd config
ynh_add_systemd_config

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###   - You can remove these files in conf/.
###   - Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###   - As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###   - And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS if the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)
yunohost service add "$app" --description="ARN Messager" --log="/var/log/$app/$app.log"

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###   - Remove the section "BACKUP LOGROTATE" in the backup script
###   - Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###   - As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###   - And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting $app's systemd service..." --weight=1

### `ynh_systemd_action` is used to start a systemd service for an app.
### Only needed if you have configure a systemd service
### If you're not using these lines:
###   - Remove the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the backup script
###   - As well as the section "START SYSTEMD SERVICE" in the restore script
###   - As well as the section"STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the upgrade script
###   - And the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the change_url script

# Start a systemd service
ynh_systemd_action --service_name="$app" --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last
